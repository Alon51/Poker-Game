			//Pair/s:
			if (i < 3 && (this->hand[i + 1].value != this->hand[i + 2].value))
				pair++;
			else
				pair++;

			//Three of a kind:
			if (this->hand[i + 1].value == this->hand[i + 2].value)
				three++;
			else
				three++;











			//counter++;

			//if (counter == 1){
				//pair++;
				
				//if (this->hand[i].value != this->hand[i+1].value) {
				//	counter = 0;
				//}
				//if(three == 1){
				//	//pair--;
				//	break;
				//}
			}
			//if (counter == 2 && (this->hand[i].value == this->hand[i-1].value)) {
			//	three++;
			//	pair--;
			//	counter = 0;
			//}
			//if (counter == 3){
			//	four++;
			//	three = 0;
			//	pair = 0; 
			//	break;
			//}
			//counter = 0;
		}








	for (int i = 1; i < 5; i++) {
	

		//Check for two cards that are similar in value:
		if (this->hand[i].value == this->hand[i - 1].value) {
			count++;
		}
		else {

			switch (count) {
			case 1:
				pair++;
				break;
			case 2:
				three++;
				break;
			case 3:
				four++;
				break;
			}
		}
		//count = 1;
		//same = false;
	}





	
	////cout << "Number of counter: " << count << "\n";
	//cout << "Number of pairs: " << pair << "\n";
	//cout << "Number of two pair: " << twoPair << "\n";
	//cout << "Number of three: " << three << "\n";
	//cout << "Number of four: " << four << "\n";
	//cout << "Number of full house: " << fullHouse << "\n";
	//cout << "Number of straight: " << straight << "\n";
	//cout << "Number of flush: " << flush << "\n";
	//cout << "Number of straight Flush: " << straightFlush << "\n";
	//cout << "Number of royal Flush: " << royalFlush << "\n";
	//cout << "Number of kicker: " << kicker << "\n\n";
	////cout << "Pair Values: " << pairValueOne << " " << pairValueTwo << "\n\n";














		//if (kicker == 1)
	//	return 0;
	//else if (pair == 1)
	//	return 1;
	//else if (pair == 2)//For two pairs
	//	return 2;
	//else if (three == 1)
	//	return 3;
	//else if (straight == 1)
	//	return 4;
	//else if (flush == 1)
	//	return 5;
	//else if (fullHouse == 1)
	//	return 6;
	//else if (four == 1)
	//	return 7;
	//else if (straightFlush == 1)
	//	return 8;
	//else // Royal flush
	//	return 9;




	
	//cout << hand[0].value << "\t";
	//cout << hand[1].value << "\t";
	//cout << hand[2].value << "\t";
	//cout << hand[3].value << "\t";
	//cout << hand[4].value << "\n\n";















	
		/*cout << "Equal" << "\n";*/

		switch (this->ranking()) {//Doesn't matter which object you choose, they are equal

			case 0:
				//if (this->hand[4].value < handTwo.hand[4].value)
				//	return true;
				//else if (this->hand[4].value > handTwo.hand[4].value)
				//	return false;
				//else
				//	cout << "same value in kicker";
				//break;
			case 1:

			case 2:
			case 3:
			case 4:
			case 5:
			case 6:
			case 7:
			case 8:
			case 9:
			cout << "same value in kicker";







					case 0://KICKER

			for (int i = 4; i >= 0; i--) {

				if (this->hand[i] > handTwo.hand[i]) {
					cout << "First hand high card is greater" << endl;
					return false;
				}
				else if (this->hand[i] < handTwo.hand[i]) {
					cout << "Second hand high card is greater" << endl;
					return false;
				}
				//The third case is that thery're equal which in this case do nothing.
			}
			return true; // Both players have the same cards (IN VALUE)


			//if (this->newHand[1] > handTwo.newHand[1])
			//	cout << "The kickers are not the same, first-hand is greater" << endl;
			//else if (this->newHand[1] < handTwo.newHand[1])
			//	cout << "The kickers are not the same, second-hand is greater" << endl;
			//else //Kickers have the same value
			//	return true;
			//Do I need to check for other cards if they are equal?<<<<<<<<<<<<<<<<---------------------


			
	PlayingCard *k[2];
	

	k[0] = &cardOne;
	cout << k[0]->value << endl;
	k[1] = &cardTwo;
	cout << k[1]->value << endl;
	
	*arrayHand= *k[0];
			
	k[3] = &cardThree;

	//arrayHand[0] = cardFour;
	cout << arrayHand[0].value << "-------" << endl;


		//PokerHand(PlayingCard C1, PlayingCard C2, PlayingCard C3, PlayingCard C4, PlayingCard C5);


	//PokerHand::PokerHand(PlayingCard C1, PlayingCard C2, PlayingCard C3, PlayingCard C4, PlayingCard C5) {
//
//	hand.push_back(C1);
//	hand.push_back(C2);
//	hand.push_back(C3);
//	hand.push_back(C4);
//	hand.push_back(C5);
//	sort(hand.begin(), hand.end());
//}



	////Creat five cards for the hand:
	//PlayingCard cardOne  (PlayingCard::CLUB, PlayingCard::JACK),
	//			cardTwo  (PlayingCard::DIAMOND, PlayingCard::FIVE),
	//			cardThree(PlayingCard::CLUB, PlayingCard::EIGHT),
	//			cardFour (PlayingCard::DIAMOND, PlayingCard::TWO),
	//			cardFive (PlayingCard::DIAMOND, PlayingCard::JACK);

	////Creat additional five cards (T is for two):
	//PlayingCard cardOneT  (PlayingCard::DIAMOND, PlayingCard::JACK),
	//			cardTwoT  (PlayingCard::CLUB, PlayingCard::TEN),
	//			cardThreeT(PlayingCard::DIAMOND, PlayingCard::NINE),
	//			cardFourT (PlayingCard::CLUB, PlayingCard::JACK),
	//			cardFiveT (PlayingCard::CLUB, PlayingCard::FOUR);

	//handA.push_back(cardOne); handA.push_back(cardTwo); handA.push_back(cardThree); handA.push_back(cardFour); handA.push_back(cardFive);
	//handB.push_back(cardOneT); handB.push_back(cardTwoT); handB.push_back(cardThreeT); handB.push_back(cardFourT); handB.push_back(cardFiveT);
		

		//Insert the five cards to the hand:
		//PokerHand firstHand(cardOne, cardTwo, cardThree, cardFour, cardFive);

		//Insert them into the second hand:
		//PokerHand secondHand(cardOneT, cardTwoT, cardThreeT, cardFourT, cardFiveT);




	////Checking each hand individually, 
	//if (!(sameCards(firstHand, 0) && sameCards(secondHand, 0))) {

	//	// If the individual hands return false then compare both hands:

	//	for (int i = 0; i < 5; i++)
	//		for (int j = 0; j < 5; j++) {
	//			if (firstHand[i].suit == secondHand[j].suit) {
	//				if (firstHand[i].value == secondHand[j].value) {
	//					cout << firstHand[i].value << " " << firstHand[i].suit <<
	//						" VS " << secondHand[j].value << " " << secondHand[j].suit << endl;
	//					return true;
	//				}
	//			}
	//		}
	//}
	//else {
	//	cout << "One or both of your hands containning the same cards, please check your cards again." << endl;
	//	return false;
	//}


		if (sameHand(handOne, handTwo) == 0) {

		
	}
	else if(){






		
	}